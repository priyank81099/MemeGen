{"version":3,"sources":["face.png","Memegen.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Memegen","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text1","text2","allmeme","memeimg","Myfun","bind","assertThisInitialized","generator","event","setState","defineProperty","target","name","value","preventDefault","ran","Math","floor","random","length","link","url","_this2","fetch","then","response","json","memes","data","react_default","a","createElement","id","onSubmit","type","maxlength","placeholder","onChange","className","alt","src","Component","Header","face","App","props","src_Header","src_Memegen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e1b7ace.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.be324d5b.png\";","import React,{Component} from \"react\";\r\nimport './style.css';\r\n\r\nclass Memegen extends Component {\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n            text1 : \"\" ,\r\n            text2 : \"\" ,\r\n            allmeme:[] ,\r\n            memeimg: \"https://i.imgflip.com/1ur9b0.jpg\"\r\n      }\r\n      this.Myfun = this.Myfun.bind(this);\r\n      this.generator = this.generator.bind(this);\r\n  }\r\n\r\n  Myfun(event){\r\n    this.setState({\r\n      [event.target.name] : event.target.value\r\n    })\r\n  }\r\n\r\n  generator(event){\r\n      event.preventDefault();\r\n      const ran = Math.floor( Math.random() * this.state.allmeme.length );\r\n      const link = this.state.allmeme[ran].url;\r\n      this.setState({ memeimg : link})\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n    .then( response => response.json() )\r\n    .then( response => {\r\n        const {memes} = response.data\r\n        this.setState({ allmeme : memes  })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div id=\"myform\">\r\n        <form onSubmit={this.generator} >\r\n        <div>\r\n          <div id=\"inputarea2\">\r\n            <lable id=\"lab\">Enter Top Text : </lable>\r\n            <br/>\r\n            <input type=\"text\" maxlength=\"25\" id=\"inputarea\" value={this.state.text1} name=\"text1\" placeholder=\"Enter Top Text\" onChange = {this.Myfun} />\r\n            <hr/>\r\n            <lable id=\"lab\">Enter Bottom Text : </lable>\r\n            <br/>\r\n            <input type=\"text\" maxlength=\"25\" id=\"inputarea\" value={this.state.text2} name=\"text2\" placeholder=\"Enter Bottom Text\" onChange = {this.Myfun}/>\r\n            <br/><br/>\r\n            <button id=\"sub\"> Generate </button>\r\n          </div>\r\n          <div className=\"meme\">\r\n            <img id=\"meme2\" alt=\"404\" src={this.state.memeimg}/>\r\n            <h2 className=\"top\"> {this.state.text1} </h2>\r\n            <br/>\r\n            <h2 className=\"bottom\"> {this.state.text2} </h2>\r\n          </div>\r\n        </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Memegen;\r\n","import React from 'react';\r\nimport './style.css';\r\nimport face from './face.png'\r\n\r\nconst Header = () => {\r\n  return(\r\n    <header className=\"Header\">\r\n        <img\r\n          src={face}\r\n          alt=\"problem?\"\r\n          id=\"headimg\"\r\n        />\r\n        <h1 id=\"hd1\">  MEME GENERATOR </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport Memegen from './Memegen.js';\nimport Header from './Header.js';\nimport './style.css';\n\nconst App = (props) => {\n  return(\n    <div>\n      <Header/>\n      <Memegen/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}